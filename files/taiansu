" taiansu's vimrc
" Original by Tsung-Hsiang (Sean) Chang <vgod@vgod.tw>
" Fork me on GITHUB  https://github.com/taiansu/vimrc
" read https://github.com/taiansu/vimrc/blob/master/README.md for more info

"---------------------------------------------------------------------------
" GENERAL SETTINGS
"---------------------------------------------------------------------------

filetype on
filetype off
set nocp

if has("gui_running")
  set background=dark
  colors railscasts
  set cursorline        " highlight current line
  set transparency=15   " Makes the background window 85% opaque
  "getfontname function only works after GUIEnter.
  au GUIEnter * call s:SetGuiFont()
else
  colors vgod
  highlight CursorLine  guibg=#003853 ctermbg=24  gui=none cterm=none "set current line color
endif

" General Settings
command W w !sudo tee % > /dev/null

set nocompatible  " not compatible with the old-fashion vi mode
set bs=2    " allow backspacing over everything in insert mode
set history=50    " keep 50 lines of command line history
set ruler   " show the cursor position all the time
set autoread    " auto read when file is changed from outsideyy
set ffs=unix,dos        "

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

syntax on   " syntax highlight
set hlsearch    " search highlighting

" check your OS type for behavior setting
if has("win32")
  "Windows options here
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  behave mswin
else
  if has("unix")
    set shell=/bin/zsh
    let s:uname = system('uname')
    if s:uname =~ "Darwin" || s:uname =~ "Mac"
      "Mac options here
    else
      "Linux options here
    endif
  endif
endif


set clipboard=unnamed " yank to the system register (*) by default
set showmatch   " Cursor shows matching ) and }
set showmode    " Show current mode
set wildchar=<TAB>  " start wild expansion in the command line using <TAB>
set wildmenu            " wild char completion menu

" ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent    " auto indentation
set incsearch   " incremental search
set nobackup    " no *~ backup files
set copyindent    " copy the previous indentation on autoindenting
set ignorecase    " ignore case when searching
set smartcase   " ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab    " insert tabs on the start of a line according to context
if version < 703
  set number
else
  set relativenumber                 " relative line number by default
endif

set cindent
set ic "搜尋不分大小寫
set backspace=indent,eol,start
set browsedir=current "設定Vim啟始目錄
set ruler "顯示游標位置
set whichwrap=b,s,<,>,[,] "讓退格，空格，上下箭頭遇到行首行尾時自動移到下一行(包括insert模式)
set foldmethod=syntax "folding setting
set foldlevel=2 "default fold level

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" TAB setting{
set expandtab        "replace <TAB> with spaces
set softtabstop=2
set shiftwidth=2

au FileType Makefile set noexpandtab
"}

"---------------------------------------------------------------------------
" GUIFONT SETTINGS
"---------------------------------------------------------------------------
function s:SetGuiFont()
  let os = ""
  if has("win32")
    let os="win"
    let font_name = ""
    if getfontname( "Bitstream_Vera_Sans_Mono" ) != ""
      set gfn=Bitstream_Vera_Sans_Mono:h10:cANSI
      let font_name = "Bitstream_Vera_Sans_Mono"
    elseif getfontname( "Consolas" ) != ""
      set gfn=Consolas:h11:cANSI " this is the default visual studio font
      let font_name = "Consolas"
    else
      set gfn=Lucida_Console:h10:cANSI
      let font_name = "Lucida_Console"
    endif
    silent exec "nnoremap <unique> <M-F1> :set gfn=".font_name.":h16:cANSI<CR>"
  else
    if has("unix")
      let s:uname = system('uname')
      if s:uname =~ "Darwin" || s:uname =~ "Mac"
        let os="mac" "Mac options here
        if getfontname( "DejaVu\ Sans\ Mono\ for\ Powerline" ) != ""
          set gfn=DejaVu\ Sans\ Mono\ for\ Powerline:h16
        elseif getfontname( "Bitstream_Vera_Sans_Mono" ) != ""
          set gfn=Bitstream\ Vera\ Sans\ Mono:h16
        else
          set gfn=Osaka-Mono:h16
        endif
      else
        let os="unix" "Linux options here
        set gfn=Bitstream\ Vera\ Sans\ Mono\ 16
      endif
    endif
  endif
endfunction
"}

" status line {
set laststatus=2
set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
set statusline+=\ \ \ [%{&ff}/%Y]
set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L

function! CurDir()
  let curdir = substitute(getcwd(), $HOME, "~", "")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return '[PASTE]'
  else
    return ''
  endif
endfunction
"}

" C/C++ specific settings
autocmd FileType c,cpp,cc  set cindent comments=sr:/*,mb:*,el:*/,:// cino=>s,e0,n0,f0,{0,}0,^-1s,:0,=s,g0,h1s,p2,t0,+2,(2,)20,*30

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"---------------------------------------------------------------------------
" VAM SETTINGS
"---------------------------------------------------------------------------
fun! EnsureVamIsOnDisk(vam_install_path)
  let is_installed_c = "isdirectory(a:vam_install_path.'/vim-addon-manager/autoload')"
  if eval(is_installed_c)
    return 1
  else
    if 1 == confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N")
      " I'm sorry having to add this reminder. Eventually it'll pay off.
      call confirm("Remind yourself that most plugins ship with ".
                  \"documentation (README*, doc/*.txt). It is your ".
                  \"first source of knowledge. If you can't find ".
                  \"the info you're looking for in reasonable ".
                  \"time ask maintainers to improve documentation")
      call mkdir(a:vam_install_path, 'p')
      execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'
      " VAM runs helptags automatically when you install or update 
      " plugins
      exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')
    endif
    return eval(is_installed_c)
  endif
endf

fun! SetupVAM()
  " Set advanced options like this:
  let g:vim_addon_manager = {}
  " let g:vim_addon_manager['key'] = value

  " Example: drop git sources unless git is in PATH. Same plugins can
  " be installed from www.vim.org. Lookup MergeSources to get more control
  " let g:vim_addon_manager['drop_git_sources'] = !executable('git')
  " let g:vim_addon_manager.debug_activation = 1

  " VAM install location:
  let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
  if !EnsureVamIsOnDisk(vam_install_path)
    echohl ErrorMsg
    echomsg "No VAM found!"
    echohl NONE
    return
  endif
  exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'

  " Tell VAM which plugins to fetch & load:
  let plugins = {
      \ 'always':
        \ [
            \ 'snipmate',
            \ 'snipmate-snippets',
            \ 'github:Lokaltog/vim-easymotion',
            \ 'github:Lokaltog/vim-powerline',
            \ 'github:majutsushi/tagbar',
            \ 'github:scrooloose/syntastic',
            \ 'github:Townk/vim-autoclose',
            \ 'github:tpope/vim-surround',
            \ 'github:tpope/vim-fugitive',
            \ 'github:tpope/vim-repeat',
            \ 'github:tpope/vim-endwise',
            \ 'github:Twinside/vim-cuteErrorMarker',
            \ 'github:vim-scripts/YankRing.vim',
            \ 'github:vim-scripts/VisIncr',
            \ 'github:vim-scripts/matchit.zip',
            \ 'github:sukima/xmledit',
            \ 'github:pangloss/vim-javascript',
            \ 'github:hallison/vim-markdown',
            \ 'github:matthias-guenther/hammer.vim',
            \ 'github:nathanaelkane/vim-indent-guides',
            \ 'github:mileszs/ack.vim',
            \ 'github:kien/ctrlp.vim',
            \ 'github:kchmck/vim-coffee-script',
            \ 'github:tpope/vim-rails',
            \ 'github:vim-ruby/vim-ruby',
            \ 'github:mozilla/doctorjs',
            \ 'github:scrooloose/nerdtree',
            \ 'github:scrooloose/nerdcommenter',
            \ 'github:jistr/vim-nerdtree-tabs',
            \ 'github:tyok/nerdtree-ack',
            \ 'github:jeffkreeftmeijer/vim-numbertoggle',
            \ 'github:Shougo/neocomplcache'
        \ ],
      \ 'vim': ["reload", 'vim-dev-plugin'],
      \ 'ruby' : [ "vim-ruby-debugger", "github:tpope/vim-rails", "github:vim-ruby\vim-ruby" ]
      \ }
  let activate = []
  for [k,v] in items(plugins)
    if k == 'always'
          "\ || (type(a:vam_features) == type([]) && index(a:vam_features, k) >= 0)
          "\ || (type(a:vam_features) == type('') && a:vam_features == 'all')
      call extend(activate, v)
    endif
  endfor

  call vam#ActivateAddons(activate, {'auto_install' : 0})

  "    ..ActivateAddons(["github:foo", .. => github://foo/vim-addon-foo
  "    ..ActivateAddons(["github:user/repo", .. => github://user/repo
endfun
call SetupVAM()
" experimental [E1]: load plugins lazily depending on filetype, See
" NOTES
" experimental [E2]: run after gui has been started (gvim) [3]
" option1:  au VimEnter * call SetupVAM()
" option2:  au GUIEnter * call SetupVAM()
" See BUGS sections below [*]
" Vim 7.0 users see BUGS section [3]

"---------------------------------------------------------------------------
" Tip #382: Search for <cword> and replace with input() in all open buffers
"---------------------------------------------------------------------------
fun! Replace()
  let s:word = input("Replace " . expand('<cword>') . " with:")
  :exe 'bufdo! %s/\<' . expand('<cword>') . '\>/' . s:word . '/ge'
  :unlet! s:word
endfun

"---------------------------------------------------------------------------
" USEFUL SHORTCUTS
"---------------------------------------------------------------------------
" set leader to ,
let mapleader=","
let g:mapleader=","

"replace the current word in all opened buffers
map <leader>r :call Replace()<CR>

" open the error console
map <leader>cc :botright cope<CR>
" move to next error
map <leader>] :cn<CR>
" move to the prev error
map <leader>[ :cp<CR>

" --- move around splits {
" move to and maximize the below split
map <C-J> <C-W>j<C-W>_
" move to and maximize the above split
map <C-K> <C-W>k<C-W>_
" move to and maximize the left split
nmap <c-h> <c-w>h<c-w><bar>
" move to and maximize the right split
nmap <c-l> <c-w>l<c-w><bar>
set wmw=0 " set the min width of a window to 0 so we can maximize others
set wmh=0 " set the min height of a window to 0 so we can maximize others
" }

" move around tabs. conflict with the original screen top/bottom
" comment them out if you want the original H/L
" go to prev tab
map <S-H> gT
" go to next tab
map <S-L> gt

" new tab
map <C-t><C-t> :tabnew<CR>
" close tab
map <C-t><C-w> :tabclose<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C->

" ,p toggles paste mode
nmap <leader>p :set paste!<BAR>set paste?<CR>

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" :cd. change working directory to that of the current file
cmap cd. lcd %:p:h

" :ccd show the full path of the current file
cmap ccd cd %:p:h

" Writing Restructured Text (Sphinx Documentation) {
" Ctrl- :    underline Parts w/ #'s
noremap  <C-> yyPVr#yyjp
inoremap <C-> <esc>yyPVr#yyjpA
" Ctrl- 2:    underline Chapters w/ *'s
noremap  <C->2 yyPVr*yyjp
inoremap <C->2 <esc>yyPVr*yyjpA
" Ctrl- 3:    underline Section Level  w/ ='s
noremap  <C->3 yypVr=
inoremap <C->3 <esc>yypVr=A
" Ctrl- 4:    underline Section Level 2 w/ -'s
noremap  <C->4 yypVr-
inoremap <C->4 <esc>yypVr-A
" Ctrl- 5:    underline Section Level 3 w/ ^'s
noremap  <C->5 yypVr^
inoremap <C->5 <esc>yypVr^A
"}

"---------------------------------------------------------------------------
" PROGRAMMING SHORTCUTS
"---------------------------------------------------------------------------

" Ctrl-[ jump out of the tag stack (undo Ctrl-])
map <C-[> <ESC>:po<CR>

" ,g generates the header guard
map <leader>g :call IncludeGuard()<CR>
fun! IncludeGuard()
  let basename = substitute(bufname(""), '.*/', '', '')
  let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
  call append(0, "#ifndef " . guard)
  call append(1, "#define " . guard)
  call append( line("$"), "#endif // for #ifndef " . guard)
endfun



" Enable omni completion. (Ctrl-X Ctrl-O)
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete

" use syntax complete if nothing else available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \ if &omnifunc == "" |
        \   setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
endif

set cot-=preview "disable doc preview in omnicomplete

" make CSS omnicompletion work for SASS and SCSS
autocmd BufNewFile,BufRead *.scss             set ft=scss.css
autocmd BufNewFile,BufRead *.sass             set ft=sass.css

"---------------------------------------------------------------------------
" ENCODING SETTINGS
"---------------------------------------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1

fun! ViewUTF8()
  set encoding=utf-8
  set termencoding=big5
endfun

fun! UTF8()
  set encoding=utf-8
  set termencoding=big5
  set fileencoding=utf-8
  set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
  set encoding=big5
  set fileencoding=big5
endfun

let $LANG="zh_TW.utf-8"
language messages zh_TW.utf-8
set langmenu=zh_TW.utf-8
set ambiwidth=double
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"---------------------------------------------------------------------------
" PLUGIN SETTINGS
"---------------------------------------------------------------------------

" ------- vim-latex - many latex shortcuts and snippets {

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash
set grepprg=grep\ -nH\ $*
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

"}

" --- AutoClose - Inserts matching bracket, paren, brace or quote
" fixed the arrow key problems caused by AutoClose
if !has("gui_running")
  set term=linux
  imap OA <ESC>ki
  imap OB <ESC>ji
  imap OC <ESC>li
  imap OD <ESC>hi

  nmap OA k
  nmap OB j
  nmap OC l
  nmap OD h
endif

" --- EasyMotion
"let g:EasyMotion_leader_key = '<Leader>' " default is <Leader><Leader>
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" --- TagBar
" toggle TagBar with F7
nnoremap <silent> <F7> :TagbarToggle<CR>
" set focus to TagBar when opening it
let g:tagbar_autofocus = 1

" --- snipMate
imap <C-t>  <C-r><TAB>
let g:snipMate = { 'scope_aliases' :
        \ {'objc' :'c'
        \ ,'cpp': 'c'
        \ ,'cs':'c'
        \ ,'xhtml': 'html'
        \ ,'html': 'javascript'
        \ ,'php': 'php,html,javascript'
        \ ,'ur': 'html,javascript'
        \ ,'mxml': 'actionscript'
        \ ,'haml': 'html,javascript'
        \ ,'erb': 'html,javascript'
        \ }}

" --- PowerLine
let g:Powerline_symbols = 'fancy' " require fontpatcher

" ---Vim-indent-guides
let g:indent_guides_guide_size = 2
let g:indent_guides_start_level = 2

" --- NERDTree
nmap <silent> <leader>nt :NERDTreeMirrorToggle<CR>

" --- NERDTreeTab
let g:nerdtree_tabs_open_on_gui_startup = 0
map <silent> <leader>t <plug>NERDTreeTabsToggle<CR>

" ---JavaScript Syntax
let g:javascript_enable_domhtmlcss = 1 "js語法高亮腳本的設置


" ---YankRing
let g:yankring_replace_n_pkey = '<C-o>'
let g:yankring_replace_n_nkey = '<C-i>'

" --- NeoComplCache
" Enable AutoComplPop.
let g:acp_enableAtStartup = 0
" Enable NeoComplCache.
let g:neocomplcache_enable_at_startup = 1
" Disable AutoComplPop auto popup
let g:neocomplcache_disable_auto_complete = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Enable auto select
let g:neocomplcache_enable_auto_select = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
"For input-saving, this variable controls whether you can  choose a candidate with a alphabet or number displayed beside a candidate after '-'.  When you input 'ho-a',  neocomplcache will select candidate 'a'.
let g:neocomplcache_enable_quick_match = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Plugin key-mappings.
"imap <C-k>     <Plug>(neocomplcache_snippets_expand)
"smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
inoremap <expr><space>  pumvisible() ? neocomplcache#smart_close_popup() . "\<SPACE>" : "\<SPACE>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags



if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" --- CtrlP
"  <C-P> invoke CtrlP
let g:ctrlp_map = '<C-p>'
" sets local working directory as the nearest ancestor
" that contains one of these directories or files: .git/
let g:ctrlp_working_path_mode = 2

"exclude directories or files from the search
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
"let g:ctrlp_custom_ignore = {
"\ 'dir':  '\.git$\|\.hg$\|\.svn$',
"\ 'file': '\.exe$\|\.so$\|\.dll$',
"\ 'link': 'some_bad_symbolic_links',
"\ }

"exclude directories or files from the search
"and use a custom file listing command.
if has("win32")
  set wildignore+=tmp\*,*.swp,*.zip,*.exe   " Windows
  let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
else
  if has("unix")
    let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
  endif
endif

" --- Hammer
map <leader><leader>h :Hammer<CR>

"---------------------------------------------------------------------------
" OTHER SETTINGS
"---------------------------------------------------------------------------
set backupext=.bak  "*~ backup files to .bak
set nobackup    " no *~ backup files
set nowritebackup   " no *~ backup files
