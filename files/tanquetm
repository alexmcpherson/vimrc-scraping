"-----------------------------------------------------------------------
" Basic configuration.

set autoread " Detects if file has been modified by another application and updates it
set autowrite " Autosafe before :next and :make commands
set laststatus=2 " Always shows statusbar
set matchpairs+=<:> " Set character matches (begin:end)
"set matchtime=1 " Time to show match pair
set mouse=a " Activate all mouse modes in terminal.
set noerrorbells " Desactiva la campana de sistema para los errores
set number "Show linenumbers
set showmode " Show actual status in status bar

"Use TAB to complete when typing words, else inserts TABs as usual.
""Uses dictionary and source files to find matching words to complete.

"See help completion for source,
"Note: usual completion is on <C-n> but more trouble to press all the time.
"Never type the same word twice and maybe learn a new spellings!
"Use the Linux dictionary when spelling is in doubt.
"Window users can copy the file to their machine.
"function! Tab_Or_Complete()
"    if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
"        return "\<C-N>"
"    else
"        return "\<Tab>"
"    endif
"endfunction

"inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
set dictionary="$HOME/.vim/dict/english.vim"

" set bs=2
" set cindent
" set cpoptions-=m  " Showmatch config
set cursorline " Show cursor line position
" set diffexpr=MyDiff() " function that compares two files
" set gdefault " Assume /g flag by default in substitutions to replace matches
set hlsearch " Highlight matches in search
" set lbr " Linebreak
" set paste " Allows to paste text
" set sc " Show Commands
" set smartindent " Autoindent for C programs
" set spell " Activate automatic language correction
" set spelllang=es " Set language
" set splitbelow " On window split, shows new window below
" set ttyfast " Enables fast connection to terminal
" set dictionary="$HOME/.vim/dict/"

set nomodeline " for security reasons
set nocompatible

filetype off " temporarily
silent! call pathogen#helptags() " Load bundles help
call pathogen#runtime_append_all_bundles() " Load bundles code

" Set leader to comma.
let mapleader = ","
let maplocalleader = ","

" Don't redraw screen while executing macros.
set nolazyredraw

" Behave intelligently for type of file.
filetype plugin indent on

" Syntax highlighting.
function! SyntaxToggle()
    execute "syntax" exists("g:syntax_on") ? "off" : "on"
endfunction

nmap <leader>s :call SyntaxToggle()<cr><C-l><cr>
syntax on

set ruler                         " Show cursor position.
set rulerformat=%30(%=\:b%n%y%r%w\ %l,%c%V\ %P%)

" Give more context in viewport.
set scrolloff=3

" Scroll viewport faster.
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Encoding and line breaks.
set encoding=utf-8
set ffs=unix,dos

" Completion for file open etc.
set wildmenu
set wildmode=list:longest,full " Autocomplete
set wildignore+=*.log,*.pdf,*.swp,*.o,*.hi,*.py[co],*~

" Ignore these when using TAB key with :e
set suffixes=~,.aux,.bak,.bkp,.dvi,.hi,.o,.pdf,.gz,.idx,.log,.ps,.swp,.tar,.ilg,.bbl,.toc,.ind

" Create backup files ending in ~, in ~/tmp or, if
" that is not possible, in the working directory.
set backup
set bex=.bak
" directories for backups
set backupdir=$HOME/.backup
set directory=$HOME/.backup
" directory for swap
set dir=$HOME/.backup

" Flexible backspace: allow backspacing over autoindent, line breaks, start of
" insert.
set backspace=indent,eol,start

" No audible bell.
set visualbell

" Show line and column position of cursor, with percentage.
set ruler

" Make tabs and trailing space visible on ,l
set listchars=tab:>-,trail:.
set list
nmap <silent> <leader>l :set invlist list?<cr>

" Show matching brackets.
set showmatch
set mat=4  " for half a sec

" Tabs:  default is four spaces.
set expandtab
set tabstop=4
set softtabstop=0
set shiftwidth=4  " for autoindent
set shiftround     " indent to a multiple of shiftwidth
set autoindent
set smarttab "Uses shiftwidth when inserts a <Tab>.

nmap <leader>2 :set tabstop=2<cr>:set shiftwidth=2<cr>
nmap <leader>4 :set tabstop=4<cr>:set shiftwidth=4<cr>

" Reflow paragraphs intelligently. using 'par'.
set formatprg="par -h -w78 -B=.,\?_A_a "
map <C-\> !}par -h -w78 -B=.,\?_A_a <cr>

" Go to nearest match as you type.
set incsearch
set ignorecase  " ignore case in search and tags
set smartcase   " unless the pattern contains uppercase

" Set title of window according to filename.
set title

" Show command on last line.
set showcmd

" This sets soft wrapping:
" set wrap linebreak textwidth=0
set wrap linebreak textwidth=120
"set showbreak=->

:nmap ,w :w<cr>

" Don't force save when changing buffers
set hidden

" NOTE: Snipmate won't work in paste mode!
"set pastetoggle=<F2>

" Remember more commands.
set history=2000

set undolevels=1000             " use many levels of undo

" Buffer movement (C-n - next, C-p - previous).
map <C-n> :bn<cr>
map <C-p> :bp<cr>

" Tab movement
" gt next tab
" gT prev tab
" 3gt tab 3

" Split window movement
map <F4> <C-W><C-W>
map <C-Up> <C-W><Up>
map <C-Down> <C-W><Down>
map <C-Right> <C-W><Right>
map <C-Left> <C-W><Left>

" Use <Leader>g to go to a url under cursor in UTL format <url:blah>
:map <Leader>g :Utl<cr>
:let g:utl_opt_highlight_urls='yes'
:let g:utl_cfg_hdl_mt_generic = 'silent !open "%p"&'

" s skips whitespace and puts cursor on next non-whitespace char
:map s :call search('\S','ceW')<cr>
" S skips preceding whitespace and puts cursor on last non-whitespace char
:map S :call search('\S','bceW')<cr>

" If for aesthetic reasons you want a left margin in writing text...
function! GutterLeft()
  set number
  highlight LineNr ctermfg=Black
endfunction

" Use space and backspace for quick navigation forward/back.
noremap <Space> <PageDown>
noremap <BS> <PageUp>

" for text files set width = 78 chars
autocmd FileType text setlocal textwidth=78

" When editing a file, always jump to the last known cursor position. Don't
" do it when the position is invalid or when inside an event handler (happens
" when dropping a file on gvim).
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

" Highlight according to markdown conventions in text files.
augroup text
  autocmd BufRead *.txt set ai formatoptions=tcroqn2 comments=n:>
augroup END

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
" thanks Douglas Potts).
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Use zl to list buffers, and go to matching buffer
" Type part of bufname after prompt.
nmap zl :ls!<CR>:buf 

" Visit todo list
nmap <Leader>td :e ~/Wiki/TodoList<CR>
nmap <Leader>tr :e ~/Wiki/FuentesTrecetas<CR>

function! SearchWiki(searchTerm)
  exec ":vimgrep " . a:searchTerm . " ~/Wiki/*"
  exec ":copen"
endfunction

command -nargs=1 Find call SearchWiki(<f-args>)

" Read abbreviations file if present.
if filereadable(expand("~/.vim/abbrevs.vim"))
    source ~/.vim/abbrevs.vim
endif

" Read maps file if present.
if filereadable(expand("~/.vim/maps.vim"))
    source ~/.vim/maps.vim
endif

" Colorscheme
let g:solarized_termcolors=16
let g:solarized_termtrans=0
let g:solarized_menu=0
let g:solarized_italic=0
set t_Co=16
syntax enable

set background=dark " Highlighting color
colorscheme solarized

" cambiamos el color de fondo y frente del editor
"hi Normal guibg=black guifg=white

function! Togbg()
    let &background = ( &background == "dark"? "light" : "dark" )
    exe "colorscheme " . g:colors_name
endfunction

map <leader>b :call togbg()<cr>

" color y formato de barra de estado
if has('statusline')
    set statusline=%<%f\ %=\:\b%n%y%m%r%w\ posici贸n\:%l,%c%v\ %p 
    set formatoptions+=tcq
endif

hi StatusLine cterm=bold ctermfg=green ctermbg=darkgray gui=none guifg=white guibg=darkgray

"-----------------------------------------------------------------------
" GUI Settings {
if has("gui_running")
  exe "colorscheme " . g:colors_name
  set columns=120
  " set guifont=DejaVu\ Sans\ Mono\ 8  " set in ~/.vimrc
"  set guioptions=ce 
"  set guioptions-=T 
  "              ||
  "              |+-- use simple dialogs rather than pop-ups
  "              +  use GUI tabs, not console style tabs
  set lines=40
  set mousehide " hide the mouse cursor when typing
endif

"-----------------------------------------------------------------------
" Scripts and addons. These are managed by pathogen and live in bundle/.
" Most of them are git submodules, so I can keep up to date
"

" potwiki (personal wiki)
let potwiki_home = "$HOME/Wiki/WelcomePage"


" Detect twig filetype
au BufNewFile,BufRead *.twig set filetype=jinja.javascript

"Ranger
fun Ranger()
  silent !ranger --choosefile=/tmp/chosen
  if filereadable('/tmp/chosen')
    exec 'edit ' . system('cat /tmp/chosen')
    call system('rm /tmp/chosen')
  endif
  redraw!
endfun
map <leader>r :call Ranger()


" Configuraci贸n Supertab
" let g:SuperTabDefaultCompletionType = "context"

" Configuraci贸n para Command-T"
let g:CommandTMaxFiles=20000

" Configuraci贸n para php-cs-fixer
let g:php_cs_fixer_path = "$HOME/.vim/vendors/php-cs-fixer.phar"

" let g:vlh_repository_dir = "$HOME/.vim/.history/"
